{
  "version": 3,
  "sources": ["../../@portabletext/toolkit/src/asserters.ts", "../../@portabletext/toolkit/src/sortMarksByOccurences.ts", "../../@portabletext/toolkit/src/buildMarksTree.ts", "../../@portabletext/toolkit/src/nestLists.ts", "../../@portabletext/toolkit/src/spanToPlainText.ts", "../../@portabletext/toolkit/src/toPlainText.ts", "../../@portabletext/toolkit/src/types.ts", "../../@portabletext/react/src/components/list.tsx", "../../@portabletext/react/src/components/marks.tsx", "../../@portabletext/react/src/warnings.ts", "../../@portabletext/react/src/components/unknown.tsx", "../../@portabletext/react/src/components/defaults.tsx", "../../@portabletext/react/src/components/merge.ts", "../../@portabletext/react/src/react-portable-text.tsx"],
  "sourcesContent": ["import type {\n  ArbitraryTypedObject,\n  PortableTextBlock,\n  PortableTextListItemBlock,\n  PortableTextSpan,\n  TypedObject,\n} from '@portabletext/types'\n\nimport type {ToolkitNestedPortableTextSpan, ToolkitPortableTextList, ToolkitTextNode} from './types'\n\n/**\n * Strict check to determine if node is a correctly formatted Portable Text span.\n *\n * @param node - Node to check\n * @returns True if valid Portable Text span, otherwise false\n */\nexport function isPortableTextSpan(\n  node: ArbitraryTypedObject | PortableTextSpan,\n): node is PortableTextSpan {\n  return (\n    node._type === 'span' &&\n    'text' in node &&\n    typeof node.text === 'string' &&\n    (typeof node.marks === 'undefined' ||\n      (Array.isArray(node.marks) && node.marks.every((mark) => typeof mark === 'string')))\n  )\n}\n\n/**\n * Strict check to determine if node is a correctly formatted Portable Text block.\n *\n * @param node - Node to check\n * @returns True if valid Portable Text block, otherwise false\n */\nexport function isPortableTextBlock(\n  node: PortableTextBlock | TypedObject,\n): node is PortableTextBlock {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type === 'string' &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== '@' &&\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    (!('markDefs' in node) ||\n      !node.markDefs ||\n      (Array.isArray(node.markDefs) &&\n        // Every mark definition needs to have an `_key` to be mappable in child spans\n        node.markDefs.every((def) => typeof def._key === 'string'))) &&\n    // `children` is required and needs to be an array\n    'children' in node &&\n    Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every((child) => typeof child === 'object' && '_type' in child)\n  )\n}\n\n/**\n * Strict check to determine if node is a correctly formatted portable list item block.\n *\n * @param block - Block to check\n * @returns True if valid Portable Text list item block, otherwise false\n */\nexport function isPortableTextListItemBlock(\n  block: PortableTextBlock | TypedObject,\n): block is PortableTextListItemBlock {\n  return (\n    isPortableTextBlock(block) &&\n    'listItem' in block &&\n    typeof block.listItem === 'string' &&\n    (typeof block.level === 'undefined' || typeof block.level === 'number')\n  )\n}\n\n/**\n * Loose check to determine if block is a toolkit list node.\n * Only checks `_type`, assumes correct structure.\n *\n * @param block - Block to check\n * @returns True if toolkit list, otherwise false\n */\nexport function isPortableTextToolkitList(\n  block: TypedObject | ToolkitPortableTextList,\n): block is ToolkitPortableTextList {\n  return block._type === '@list'\n}\n\n/**\n * Loose check to determine if span is a toolkit span node.\n * Only checks `_type`, assumes correct structure.\n *\n * @param span - Span to check\n * @returns True if toolkit span, otherwise false\n */\nexport function isPortableTextToolkitSpan(\n  span: TypedObject | ToolkitNestedPortableTextSpan,\n): span is ToolkitNestedPortableTextSpan {\n  return span._type === '@span'\n}\n\n/**\n * Loose check to determine if node is a toolkit text node.\n * Only checks `_type`, assumes correct structure.\n *\n * @param node - Node to check\n * @returns True if toolkit text node, otherwise false\n */\nexport function isPortableTextToolkitTextNode(\n  node: TypedObject | ToolkitTextNode,\n): node is ToolkitTextNode {\n  return node._type === '@text'\n}\n", "import type {PortableTextSpan, TypedObject} from '@portabletext/types'\n\nimport {isPortableTextSpan} from './asserters'\n\nconst knownDecorators = ['strong', 'em', 'code', 'underline', 'strike-through']\n\n/**\n * Figures out the optimal order of marks, in order to minimize the amount of\n * nesting/repeated elements in environments such as HTML. For instance, a naive\n * implementation might render something like:\n *\n * ```html\n * <strong>This block contains </strong>\n * <strong><a href=\"https://some.url/\">a link</a></strong>\n * <strong> and some bolded text</strong>\n * ```\n *\n * ...whereas an optimal order would be:\n *\n * ```html\n * <strong>\n *   This block contains <a href=\"https://some.url/\">a link</a> and some bolded text\n * </strong>\n * ```\n *\n * This is particularly necessary for cases like links, where you don't want multiple\n * individual links for different segments of the link text, even if parts of it are\n * bolded/italicized.\n *\n * This function is meant to be used like: `block.children.map(sortMarksByOccurences)`,\n * and is used internally in {@link buildMarksTree | `buildMarksTree()`}.\n *\n * The marks are sorted in the following order:\n *\n *  1. Marks that are shared amongst the most adjacent siblings\n *  2. Non-default marks (links, custom metadata)\n *  3. Decorators (bold, emphasis, code etc), in a predefined, preferred order\n *\n * @param span - The current span to sort\n * @param index - The index of the current span within the block\n * @param blockChildren - All children of the block being sorted\n * @returns Array of decorators and annotations, sorted by \"most adjacent siblings\"\n */\nexport function sortMarksByOccurences(\n  span: PortableTextSpan | TypedObject,\n  index: number,\n  blockChildren: (PortableTextSpan | TypedObject)[],\n): string[] {\n  if (!isPortableTextSpan(span) || !span.marks) {\n    return []\n  }\n\n  if (!span.marks.length) {\n    return []\n  }\n\n  // Slicing because we'll be sorting with `sort()`, which mutates\n  const marks = span.marks.slice()\n  const occurences: Record<string, number> = {}\n  marks.forEach((mark) => {\n    occurences[mark] = 1\n\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex]\n\n      if (\n        sibling &&\n        isPortableTextSpan(sibling) &&\n        Array.isArray(sibling.marks) &&\n        sibling.marks.indexOf(mark) !== -1\n      ) {\n        occurences[mark]++\n      } else {\n        break\n      }\n    }\n  })\n\n  return marks.sort((markA, markB) => sortMarks(occurences, markA, markB))\n}\n\nfunction sortMarks<U extends string, T extends Record<U, number>>(\n  occurences: T,\n  markA: U,\n  markB: U,\n): number {\n  const aOccurences = occurences[markA]\n  const bOccurences = occurences[markB]\n\n  if (aOccurences !== bOccurences) {\n    return bOccurences - aOccurences\n  }\n\n  const aKnownPos = knownDecorators.indexOf(markA)\n  const bKnownPos = knownDecorators.indexOf(markB)\n\n  // Sort known decorators last\n  if (aKnownPos !== bKnownPos) {\n    return aKnownPos - bKnownPos\n  }\n\n  // Sort other marks simply by key\n  return markA.localeCompare(markB)\n}\n", "import type {\n  ArbitraryTypedObject,\n  PortableTextBlock,\n  PortableTextMarkDefinition,\n} from '@portabletext/types'\n\nimport {isPortableTextSpan} from './asserters'\nimport {sortMarksByOccurences} from './sortMarksByOccurences'\nimport type {ToolkitNestedPortableTextSpan, ToolkitTextNode} from './types'\n\n/**\n * Takes a Portable Text block and returns a nested tree of nodes optimized for rendering\n * in HTML-like environments where you want marks/annotations to be nested inside of eachother.\n * For instance, a naive span-by-span rendering might yield:\n *\n * ```html\n * <strong>This block contains </strong>\n * <strong><a href=\"https://some.url/\">a link</a></strong>\n * <strong> and some bolded and </strong>\n * <em><strong>italicized text</strong></em>\n * ```\n *\n * ...whereas an optimal order would be:\n *\n * ```html\n * <strong>\n *   This block contains <a href=\"https://some.url/\">a link</a>\n *   and some bolded and <em>italicized text</em>\n * </strong>\n * ```\n *\n * Note that since \"native\" Portable Text spans cannot be nested,\n * this function returns an array of \"toolkit specific\" types:\n * {@link ToolkitTextNode | `@text`} and {@link ToolkitNestedPortableTextSpan | `@span` }.\n *\n * The toolkit-specific type can hold both types, as well as any arbitrary inline objects,\n * creating an actual tree.\n *\n * @param block - The Portable Text block to create a tree of nodes from\n * @returns Array of (potentially) nested spans, text nodes and/or arbitrary inline objects\n */\nexport function buildMarksTree<M extends PortableTextMarkDefinition = PortableTextMarkDefinition>(\n  block: PortableTextBlock<M>,\n): (ToolkitNestedPortableTextSpan<M> | ToolkitTextNode | ArbitraryTypedObject)[] {\n  const {children} = block\n  const markDefs = block.markDefs ?? []\n  if (!children || !children.length) {\n    return []\n  }\n\n  const sortedMarks = children.map(sortMarksByOccurences)\n\n  const rootNode: ToolkitNestedPortableTextSpan<M> = {\n    _type: '@span',\n    children: [],\n    markType: '<unknown>',\n  }\n\n  let nodeStack: ToolkitNestedPortableTextSpan<M>[] = [rootNode]\n\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i]\n    if (!span) {\n      continue\n    }\n\n    const marksNeeded = sortedMarks[i] || []\n    let pos = 1\n\n    // Start at position one. Root is always plain and should never be removed\n    if (nodeStack.length > 1) {\n      for (pos; pos < nodeStack.length; pos++) {\n        const mark = nodeStack[pos]?.markKey || ''\n        const index = marksNeeded.indexOf(mark)\n\n        if (index === -1) {\n          break\n        }\n\n        marksNeeded.splice(index, 1)\n      }\n    }\n\n    // Keep from beginning to first miss\n    nodeStack = nodeStack.slice(0, pos)\n\n    // Add needed nodes\n    let currentNode = nodeStack[nodeStack.length - 1]\n    if (!currentNode) {\n      continue\n    }\n\n    for (const markKey of marksNeeded) {\n      const markDef = markDefs?.find((def) => def._key === markKey)\n      const markType = markDef ? markDef._type : markKey\n      const node: ToolkitNestedPortableTextSpan<M> = {\n        _type: '@span',\n        _key: span._key,\n        children: [],\n        markDef,\n        markType,\n        markKey,\n      }\n\n      currentNode.children.push(node)\n      nodeStack.push(node)\n      currentNode = node\n    }\n\n    // Split at newlines to make individual line chunks, but keep newline\n    // characters as individual elements in the array. We use these characters\n    // in the span serializer to trigger hard-break rendering\n    if (isPortableTextSpan(span)) {\n      const lines = span.text.split('\\n')\n      for (let line = lines.length; line-- > 1; ) {\n        lines.splice(line, 0, '\\n')\n      }\n\n      currentNode.children = currentNode.children.concat(\n        lines.map((text) => ({_type: '@text', text})),\n      )\n    } else {\n      // This is some other inline object, not a text span\n      currentNode.children = currentNode.children.concat(span)\n    }\n  }\n\n  return rootNode.children\n}\n", "import type {PortableTextBlock, PortableTextListItemBlock, TypedObject} from '@portabletext/types'\n\nimport {\n  isPortableTextListItemBlock,\n  isPortableTextSpan,\n  isPortableTextToolkitList,\n} from './asserters'\nimport type {\n  ToolkitListNestMode,\n  ToolkitPortableTextDirectList,\n  ToolkitPortableTextHtmlList,\n  ToolkitPortableTextList,\n  ToolkitPortableTextListItem,\n} from './types'\n\nexport type ToolkitNestListsOutputNode<T> =\n  | T\n  | ToolkitPortableTextHtmlList\n  | ToolkitPortableTextDirectList\n\n/**\n * Takes an array of blocks and returns an array of nodes optimized for rendering in HTML-like\n * environment, where lists are nested inside of eachother instead of appearing \"flat\" as in\n * native Portable Text data structures.\n *\n * Note that the list node is not a native Portable Text node type, and thus is represented\n * using the {@link ToolkitPortableTextList | `@list`} type name (`{_type: '@list'}`).\n *\n * The nesting can be configured in two modes:\n *\n * - `direct`: deeper list nodes will appear as a direct child of the parent list\n * - `html`, deeper list nodes will appear as a child of the last _list item_ in the parent list\n *\n * When using `direct`, all list nodes will be of type {@link ToolkitPortableTextDirectList},\n * while with `html` they will be of type {@link ToolkitPortableTextHtmlList}\n *\n * These modes are available as {@link LIST_NEST_MODE_HTML} and {@link LIST_NEST_MODE_DIRECT}.\n *\n * @param blocks - Array of Portable Text blocks and other arbitrary types\n * @param mode - Mode to use for nesting, `direct` or `html`\n * @returns Array of potentially nested nodes optimized for rendering\n */\nexport function nestLists<T extends TypedObject = PortableTextBlock | TypedObject>(\n  blocks: T[],\n  mode: 'direct',\n): (T | ToolkitPortableTextDirectList)[]\nexport function nestLists<T extends TypedObject = PortableTextBlock | TypedObject>(\n  blocks: T[],\n  mode: 'html',\n): (T | ToolkitPortableTextHtmlList)[]\nexport function nestLists<T extends TypedObject = PortableTextBlock | TypedObject>(\n  blocks: T[],\n  mode: 'direct' | 'html',\n): (T | ToolkitPortableTextHtmlList | ToolkitPortableTextDirectList)[]\nexport function nestLists<T extends TypedObject = PortableTextBlock | TypedObject>(\n  blocks: T[],\n  mode: ToolkitListNestMode,\n): ToolkitNestListsOutputNode<T>[] {\n  const tree: ToolkitNestListsOutputNode<T>[] = []\n  let currentList: ToolkitPortableTextList | undefined\n\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i]\n    if (!block) {\n      continue\n    }\n\n    if (!isPortableTextListItemBlock(block)) {\n      tree.push(block)\n      currentList = undefined\n      continue\n    }\n\n    // Start of a new list?\n    if (!currentList) {\n      currentList = listFromBlock(block, i, mode)\n      tree.push(currentList)\n      continue\n    }\n\n    // New list item within same list?\n    if (blockMatchesList(block, currentList)) {\n      currentList.children.push(block)\n      continue\n    }\n\n    // Different list props, are we going deeper?\n    if ((block.level || 1) > currentList.level) {\n      const newList = listFromBlock(block, i, mode)\n\n      if (mode === 'html') {\n        // Because HTML is kinda weird, nested lists needs to be nested within list items.\n        // So while you would think that we could populate the parent list with a new sub-list,\n        // we actually have to target the last list element (child) of the parent.\n        // However, at this point we need to be very careful - simply pushing to the list of children\n        // will mutate the input, and we don't want to blindly clone the entire tree.\n\n        // Clone the last child while adding our new list as the last child of it\n        const lastListItem = currentList.children[\n          currentList.children.length - 1\n        ] as ToolkitPortableTextListItem\n\n        const newLastChild: ToolkitPortableTextListItem = {\n          ...lastListItem,\n          children: [...lastListItem.children, newList],\n        }\n\n        // Swap the last child\n        currentList.children[currentList.children.length - 1] = newLastChild\n      } else {\n        ;(currentList as ToolkitPortableTextDirectList).children.push(\n          newList as ToolkitPortableTextDirectList,\n        )\n      }\n\n      // Set the newly created, deeper list as the current\n      currentList = newList\n      continue\n    }\n\n    // Different list props, are we going back up the tree?\n    if ((block.level || 1) < currentList.level) {\n      // Current list has ended, and we need to hook up with a parent of the same level and type\n      const matchingBranch = tree[tree.length - 1]\n      const match = matchingBranch && findListMatching(matchingBranch, block)\n      if (match) {\n        currentList = match\n        currentList.children.push(block)\n        continue\n      }\n\n      // Similar parent can't be found, assume new list\n      currentList = listFromBlock(block, i, mode)\n      tree.push(currentList)\n      continue\n    }\n\n    // Different list props, different list style?\n    if (block.listItem !== currentList.listItem) {\n      const matchingBranch = tree[tree.length - 1]\n      const match = matchingBranch && findListMatching(matchingBranch, {level: block.level || 1})\n      if (match && match.listItem === block.listItem) {\n        currentList = match\n        currentList.children.push(block)\n        continue\n      } else {\n        currentList = listFromBlock(block, i, mode)\n        tree.push(currentList)\n        continue\n      }\n    }\n\n    // eslint-disable-next-line no-console\n    console.warn('Unknown state encountered for block', block)\n    tree.push(block)\n  }\n\n  return tree\n}\n\nfunction blockMatchesList(block: PortableTextBlock, list: ToolkitPortableTextList) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem\n}\n\nfunction listFromBlock(\n  block: PortableTextListItemBlock,\n  index: number,\n  mode: ToolkitListNestMode,\n): ToolkitPortableTextList {\n  return {\n    _type: '@list',\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block],\n  }\n}\n\nfunction findListMatching<T extends TypedObject | PortableTextBlock>(\n  rootNode: T,\n  matching: Partial<PortableTextListItemBlock>,\n): ToolkitPortableTextList | undefined {\n  const level = matching.level || 1\n  const style = matching.listItem || 'normal'\n  const filterOnType = typeof matching.listItem === 'string'\n  if (\n    isPortableTextToolkitList(rootNode) &&\n    (rootNode.level || 1) === level &&\n    filterOnType &&\n    (rootNode.listItem || 'normal') === style\n  ) {\n    return rootNode\n  }\n\n  if (!('children' in rootNode)) {\n    return undefined\n  }\n\n  const node = rootNode.children[rootNode.children.length - 1]\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : undefined\n}\n", "import {isPortableTextToolkitSpan, isPortableTextToolkitTextNode} from './asserters'\nimport type {ToolkitNestedPortableTextSpan} from './types'\n\n/**\n * Returns the plain-text representation of a\n * {@link ToolkitNestedPortableTextSpan | toolkit-specific Portable Text span}.\n *\n * Useful if you have a subset of nested nodes and want the text from just those,\n * instead of for the entire Portable Text block.\n *\n * @param span - Span node to get text from (Portable Text toolkit specific type)\n * @returns The plain-text version of the span\n */\nexport function spanToPlainText(span: ToolkitNestedPortableTextSpan): string {\n  let text = ''\n  span.children.forEach((current) => {\n    if (isPortableTextToolkitTextNode(current)) {\n      text += current.text\n    } else if (isPortableTextToolkitSpan(current)) {\n      text += spanToPlainText(current)\n    }\n  })\n  return text\n}\n", "import type {ArbitraryTypedObject, PortableTextBlock} from '@portabletext/types'\n\nimport {isPortableTextBlock, isPortableTextSpan} from './asserters'\n\nconst leadingSpace = /^\\s/\nconst trailingSpace = /\\s$/\n\n/**\n * Takes a Portable Text block (or an array of them) and returns the text value\n * of all the Portable Text span nodes. Adds whitespace when encountering inline,\n * non-span nodes to ensure text flow is optimal.\n *\n * Note that this only accounts for regular Portable Text blocks - any text inside\n * custom content types are not included in the output.\n *\n * @param block - Single block or an array of blocks to extract text from\n * @returns The plain-text content of the blocks\n */\nexport function toPlainText(\n  block: PortableTextBlock | ArbitraryTypedObject[] | PortableTextBlock[],\n): string {\n  const blocks = Array.isArray(block) ? block : [block]\n  let text = ''\n\n  blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) {\n      return\n    }\n\n    let pad = false\n    current.children.forEach((span) => {\n      if (isPortableTextSpan(span)) {\n        // If the previous element was a non-span, and we have no natural whitespace\n        // between the previous and the next span, insert it to give the spans some\n        // room to breathe. However, don't do so if this is the first span.\n        text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? ' ' : ''\n        text += span.text\n        pad = false\n      } else {\n        pad = true\n      }\n    })\n\n    if (index !== blocks.length - 1) {\n      text += '\\n\\n'\n    }\n  })\n\n  return text\n}\n", "import type {\n  ArbitraryTypedObject,\n  PortableTextListItemBlock,\n  PortableTextMarkDefinition,\n  PortableTextSpan,\n} from '@portabletext/types'\n\n/**\n * List nesting mode for HTML, see the {@link nestLists | `nestLists()` function}\n */\nexport const LIST_NEST_MODE_HTML = 'html'\n\n/**\n * List nesting mode for direct, nested lists, see the {@link nestLists | `nestLists()` function}\n */\nexport const LIST_NEST_MODE_DIRECT = 'direct'\n\n/**\n * List nesting mode, see the {@link nestLists | `nestLists()` function}\n */\nexport type ToolkitListNestMode = 'html' | 'direct'\n\n/**\n * Toolkit-specific type representing a nested list\n *\n * See the `nestLists()` function for more info\n */\nexport type ToolkitPortableTextList = ToolkitPortableTextHtmlList | ToolkitPortableTextDirectList\n\n/**\n * Toolkit-specific type representing a nested list in HTML mode, where deeper lists are nested\n * inside of the _list items_, eg `<ul><li>Some text<ul><li>Deeper</li></ul></li></ul>`\n */\nexport interface ToolkitPortableTextHtmlList {\n  /**\n   * Type name, prefixed with `@` to signal that this is a toolkit-specific node.\n   */\n  _type: '@list'\n\n  /**\n   * Unique key for this list (within its parent)\n   */\n  _key: string\n\n  /**\n   * List mode, signaling that list nodes will appear as children of the _list items_\n   */\n  mode: 'html'\n\n  /**\n   * Level/depth of this list node (starts at `1`)\n   */\n  level: number\n\n  /**\n   * Style of this list item (`bullet`, `number` are common values, but can be customized)\n   */\n  listItem: string\n\n  /**\n   * Child nodes of this list - toolkit-specific list items which can themselves hold deeper lists\n   */\n  children: ToolkitPortableTextListItem[]\n}\n\n/**\n * Toolkit-specific type representing a nested list in \"direct\" mode, where deeper lists are nested\n * inside of the lists children, alongside other blocks.\n */\nexport interface ToolkitPortableTextDirectList {\n  /**\n   * Type name, prefixed with `@` to signal that this is a toolkit-specific node.\n   */\n  _type: '@list'\n\n  /**\n   * Unique key for this list (within its parent)\n   */\n  _key: string\n\n  /**\n   * List mode, signaling that list nodes can appear as direct children\n   */\n  mode: 'direct'\n\n  /**\n   * Level/depth of this list node (starts at `1`)\n   */\n  level: number\n\n  /**\n   * Style of this list item (`bullet`, `number` are common values, but can be customized)\n   */\n  listItem: string\n\n  /**\n   * Child nodes of this list - either portable text list items, or another, deeper list\n   */\n  children: (PortableTextListItemBlock | ToolkitPortableTextDirectList)[]\n}\n\n/**\n * Toolkit-specific type representing a list item block, but where the children can be another list\n */\nexport interface ToolkitPortableTextListItem\n  extends PortableTextListItemBlock<\n    PortableTextMarkDefinition,\n    PortableTextSpan | ToolkitPortableTextList\n  > {}\n\n/**\n * Toolkit-specific type representing a text node, used when nesting spans.\n *\n * See the {@link buildMarksTree | `buildMarksTree()` function}\n */\nexport interface ToolkitTextNode {\n  /**\n   * Type name, prefixed with `@` to signal that this is a toolkit-specific node.\n   */\n  _type: '@text'\n\n  /**\n   * The actual string value of the text node\n   */\n  text: string\n}\n\n/**\n * Toolkit-specific type representing a portable text span that can hold other spans.\n * In this type, each span only has a single mark, instead of an array of them.\n */\nexport interface ToolkitNestedPortableTextSpan<\n  M extends PortableTextMarkDefinition = PortableTextMarkDefinition,\n> {\n  /**\n   * Type name, prefixed with `@` to signal that this is a toolkit-specific node.\n   */\n  _type: '@span'\n\n  /**\n   * Unique key for this span\n   */\n  _key?: string\n\n  /**\n   * Holds the value (definition) of the mark in the case of annotations.\n   * `undefined` if the mark is a decorator (strong, em or similar).\n   */\n  markDef?: M\n\n  /**\n   * The key of the mark definition (in the case of annotations).\n   * `undefined` if the mark is a decorator (strong, em or similar).\n   */\n  markKey?: string\n\n  /**\n   * Type of the mark. For annotations, this is the `_type` property of the value.\n   * For decorators, it will hold the name of the decorator (strong, em or similar).\n   */\n  markType: string\n\n  /**\n   * Child nodes of this span. Can be toolkit-specific text nodes, nested spans\n   * or any inline object type.\n   */\n  children: (\n    | ToolkitTextNode\n    | ToolkitNestedPortableTextSpan<PortableTextMarkDefinition>\n    | ArbitraryTypedObject\n  )[]\n}\n", "import type {PortableTextListComponent, PortableTextListItemComponent} from '../types'\n\nexport const defaultLists: Record<'number' | 'bullet', PortableTextListComponent> = {\n  number: ({children}) => <ol>{children}</ol>,\n  bullet: ({children}) => <ul>{children}</ul>,\n}\n\nexport const DefaultListItem: PortableTextListItemComponent = ({children}) => <li>{children}</li>\n", "import type {TypedObject} from '@portabletext/types'\n\nimport type {PortableTextMarkComponent} from '../types'\n\ninterface DefaultLink extends TypedObject {\n  _type: 'link'\n  href: string\n}\n\nconst link: PortableTextMarkComponent<DefaultLink> = ({children, value}) => (\n  <a href={value?.href}>{children}</a>\n)\n\nconst underlineStyle = {textDecoration: 'underline'}\n\nexport const defaultMarks: Record<string, PortableTextMarkComponent | undefined> = {\n  'em': ({children}) => <em>{children}</em>,\n  'strong': ({children}) => <strong>{children}</strong>,\n  'code': ({children}) => <code>{children}</code>,\n  'underline': ({children}) => <span style={underlineStyle}>{children}</span>,\n  'strike-through': ({children}) => <del>{children}</del>,\n  link,\n}\n", "const getTemplate = (type: string, prop: string): string =>\n  `[@portabletext/react] Unknown ${type}, specify a component for it in the \\`components.${prop}\\` prop`\n\nexport const unknownTypeWarning = (typeName: string): string =>\n  getTemplate(`block type \"${typeName}\"`, 'types')\n\nexport const unknownMarkWarning = (markType: string): string =>\n  getTemplate(`mark type \"${markType}\"`, 'marks')\n\nexport const unknownBlockStyleWarning = (blockStyle: string): string =>\n  getTemplate(`block style \"${blockStyle}\"`, 'block')\n\nexport const unknownListStyleWarning = (listStyle: string): string =>\n  getTemplate(`list style \"${listStyle}\"`, 'list')\n\nexport const unknownListItemStyleWarning = (listStyle: string): string =>\n  getTemplate(`list item style \"${listStyle}\"`, 'listItem')\n\nexport function printWarning(message: string): void {\n  console.warn(message)\n}\n", "import type {PortableTextReactComponents} from '../types'\nimport {unknownTypeWarning} from '../warnings'\n\nconst hidden = {display: 'none'}\n\nexport const DefaultUnknownType: PortableTextReactComponents['unknownType'] = ({\n  value,\n  isInline,\n}) => {\n  const warning = unknownTypeWarning(value._type)\n  return isInline ? <span style={hidden}>{warning}</span> : <div style={hidden}>{warning}</div>\n}\n\nexport const DefaultUnknownMark: PortableTextReactComponents['unknownMark'] = ({\n  markType,\n  children,\n}) => {\n  return <span className={`unknown__pt__mark__${markType}`}>{children}</span>\n}\n\nexport const DefaultUnknownBlockStyle: PortableTextReactComponents['unknownBlockStyle'] = ({\n  children,\n}) => {\n  return <p>{children}</p>\n}\n\nexport const DefaultUnknownList: PortableTextReactComponents['unknownList'] = ({children}) => {\n  return <ul>{children}</ul>\n}\n\nexport const DefaultUnknownListItem: PortableTextReactComponents['unknownListItem'] = ({\n  children,\n}) => {\n  return <li>{children}</li>\n}\n", "import type {PortableTextBlockStyle} from '@portabletext/types'\nimport type {JSX} from 'react'\n\nimport type {PortableTextBlockComponent, PortableTextReactComponents} from '../types'\nimport {DefaultListItem, defaultLists} from './list'\nimport {defaultMarks} from './marks'\nimport {\n  DefaultUnknownBlockStyle,\n  DefaultUnknownList,\n  DefaultUnknownListItem,\n  DefaultUnknownMark,\n  DefaultUnknownType,\n} from './unknown'\n\nexport const DefaultHardBreak = (): JSX.Element => <br />\n\nexport const defaultBlockStyles: Record<\n  PortableTextBlockStyle,\n  PortableTextBlockComponent | undefined\n> = {\n  normal: ({children}) => <p>{children}</p>,\n  blockquote: ({children}) => <blockquote>{children}</blockquote>,\n  h1: ({children}) => <h1>{children}</h1>,\n  h2: ({children}) => <h2>{children}</h2>,\n  h3: ({children}) => <h3>{children}</h3>,\n  h4: ({children}) => <h4>{children}</h4>,\n  h5: ({children}) => <h5>{children}</h5>,\n  h6: ({children}) => <h6>{children}</h6>,\n}\n\nexport const defaultComponents: PortableTextReactComponents = {\n  types: {},\n\n  block: defaultBlockStyles,\n  marks: defaultMarks,\n  list: defaultLists,\n  listItem: DefaultListItem,\n  hardBreak: DefaultHardBreak,\n\n  unknownType: DefaultUnknownType,\n  unknownMark: DefaultUnknownMark,\n  unknownList: DefaultUnknownList,\n  unknownListItem: DefaultUnknownListItem,\n  unknownBlockStyle: DefaultUnknownBlockStyle,\n}\n", "import type {PortableTextComponents, PortableTextReactComponents} from '../types'\n\nexport function mergeComponents(\n  parent: PortableTextReactComponents,\n  overrides: PortableTextComponents,\n): PortableTextReactComponents {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const {block, list, listItem, marks, types, ...rest} = overrides\n  // @todo figure out how to not `as ...` these\n  return {\n    ...parent,\n    block: mergeDeeply(parent, overrides, 'block') as PortableTextReactComponents['block'],\n    list: mergeDeeply(parent, overrides, 'list') as PortableTextReactComponents['list'],\n    listItem: mergeDeeply(parent, overrides, 'listItem') as PortableTextReactComponents['listItem'],\n    marks: mergeDeeply(parent, overrides, 'marks') as PortableTextReactComponents['marks'],\n    types: mergeDeeply(parent, overrides, 'types') as PortableTextReactComponents['types'],\n    ...rest,\n  }\n}\n\nfunction mergeDeeply(\n  parent: PortableTextReactComponents,\n  overrides: PortableTextComponents,\n  key: 'block' | 'list' | 'listItem' | 'marks' | 'types',\n): PortableTextReactComponents[typeof key] {\n  const override = overrides[key]\n  const parentVal = parent[key]\n\n  if (typeof override === 'function') {\n    return override\n  }\n\n  if (override && typeof parentVal === 'function') {\n    return override\n  }\n\n  if (override) {\n    return {...parentVal, ...override} as PortableTextReactComponents[typeof key]\n  }\n\n  return parentVal\n}\n", "import type {ToolkitNestedPortableTextSpan, ToolkitTextNode} from '@portabletext/toolkit'\nimport {\n  buildMarksTree,\n  isPortableTextBlock,\n  isPortableTextListItemBlock,\n  isPortableTextToolkitList,\n  isPortableTextToolkitSpan,\n  isPortableTextToolkitTextNode,\n  LIST_NEST_MODE_HTML,\n  nestLists,\n  spanToPlainText,\n} from '@portabletext/toolkit'\nimport type {\n  PortableTextBlock,\n  PortableTextListItemBlock,\n  PortableTextMarkDefinition,\n  PortableTextSpan,\n  TypedObject,\n} from '@portabletext/types'\nimport {type JSX, type ReactNode, useMemo} from 'react'\n\nimport {defaultComponents} from './components/defaults'\nimport {mergeComponents} from './components/merge'\nimport type {\n  MissingComponentHandler,\n  NodeRenderer,\n  PortableTextProps,\n  PortableTextReactComponents,\n  ReactPortableTextList,\n  Serializable,\n  SerializedBlock,\n} from './types'\nimport {\n  printWarning,\n  unknownBlockStyleWarning,\n  unknownListItemStyleWarning,\n  unknownListStyleWarning,\n  unknownMarkWarning,\n  unknownTypeWarning,\n} from './warnings'\n\nexport function PortableText<B extends TypedObject = PortableTextBlock>({\n  value: input,\n  components: componentOverrides,\n  listNestingMode,\n  onMissingComponent: missingComponentHandler = printWarning,\n}: PortableTextProps<B>): JSX.Element {\n  const handleMissingComponent = missingComponentHandler || noop\n  const blocks = Array.isArray(input) ? input : [input]\n  const nested = nestLists(blocks, listNestingMode || LIST_NEST_MODE_HTML)\n\n  const components = useMemo(() => {\n    return componentOverrides\n      ? mergeComponents(defaultComponents, componentOverrides)\n      : defaultComponents\n  }, [componentOverrides])\n\n  const renderNode = useMemo(\n    () => getNodeRenderer(components, handleMissingComponent),\n    [components, handleMissingComponent],\n  )\n  const rendered = nested.map((node, index) =>\n    renderNode({node: node, index, isInline: false, renderNode}),\n  )\n\n  return <>{rendered}</>\n}\n\nconst getNodeRenderer = (\n  components: PortableTextReactComponents,\n  handleMissingComponent: MissingComponentHandler,\n): NodeRenderer => {\n  function renderNode<N extends TypedObject>(options: Serializable<N>): ReactNode {\n    const {node, index, isInline} = options\n    const key = node._key || `node-${index}`\n\n    if (isPortableTextToolkitList(node)) {\n      return renderList(node, index, key)\n    }\n\n    if (isPortableTextListItemBlock(node)) {\n      return renderListItem(node, index, key)\n    }\n\n    if (isPortableTextToolkitSpan(node)) {\n      return renderSpan(node, index, key)\n    }\n\n    if (hasCustomComponentForNode(node)) {\n      return renderCustomBlock(node, index, key, isInline)\n    }\n\n    if (isPortableTextBlock(node)) {\n      return renderBlock(node, index, key, isInline)\n    }\n\n    if (isPortableTextToolkitTextNode(node)) {\n      return renderText(node, key)\n    }\n\n    return renderUnknownType(node, index, key, isInline)\n  }\n\n  function hasCustomComponentForNode(node: TypedObject): boolean {\n    return node._type in components.types\n  }\n\n  /* eslint-disable react/jsx-no-bind */\n  function renderListItem(\n    node: PortableTextListItemBlock<PortableTextMarkDefinition, PortableTextSpan>,\n    index: number,\n    key: string,\n  ) {\n    const tree = serializeBlock({node, index, isInline: false, renderNode})\n    const renderer = components.listItem\n    const handler = typeof renderer === 'function' ? renderer : renderer[node.listItem]\n    const Li = handler || components.unknownListItem\n\n    if (Li === components.unknownListItem) {\n      const style = node.listItem || 'bullet'\n      handleMissingComponent(unknownListItemStyleWarning(style), {\n        type: style,\n        nodeType: 'listItemStyle',\n      })\n    }\n\n    let children = tree.children\n    if (node.style && node.style !== 'normal') {\n      // Wrap any other style in whatever the block serializer says to use\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {listItem, ...blockNode} = node\n      children = renderNode({node: blockNode, index, isInline: false, renderNode})\n    }\n\n    return (\n      <Li key={key} value={node} index={index} isInline={false} renderNode={renderNode}>\n        {children}\n      </Li>\n    )\n  }\n\n  function renderList(node: ReactPortableTextList, index: number, key: string) {\n    const children = node.children.map((child, childIndex) =>\n      renderNode({\n        node: child._key ? child : {...child, _key: `li-${index}-${childIndex}`},\n        index: childIndex,\n        isInline: false,\n        renderNode,\n      }),\n    )\n\n    const component = components.list\n    const handler = typeof component === 'function' ? component : component[node.listItem]\n    const List = handler || components.unknownList\n\n    if (List === components.unknownList) {\n      const style = node.listItem || 'bullet'\n      handleMissingComponent(unknownListStyleWarning(style), {nodeType: 'listStyle', type: style})\n    }\n\n    return (\n      <List key={key} value={node} index={index} isInline={false} renderNode={renderNode}>\n        {children}\n      </List>\n    )\n  }\n\n  function renderSpan(node: ToolkitNestedPortableTextSpan, _index: number, key: string) {\n    const {markDef, markType, markKey} = node\n    const Span = components.marks[markType] || components.unknownMark\n    const children = node.children.map((child, childIndex) =>\n      renderNode({node: child, index: childIndex, isInline: true, renderNode}),\n    )\n\n    if (Span === components.unknownMark) {\n      handleMissingComponent(unknownMarkWarning(markType), {nodeType: 'mark', type: markType})\n    }\n\n    return (\n      <Span\n        key={key}\n        text={spanToPlainText(node)}\n        value={markDef}\n        markType={markType}\n        markKey={markKey}\n        renderNode={renderNode}\n      >\n        {children}\n      </Span>\n    )\n  }\n\n  function renderBlock(node: PortableTextBlock, index: number, key: string, isInline: boolean) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {_key, ...props} = serializeBlock({node, index, isInline, renderNode})\n    const style = props.node.style || 'normal'\n    const handler =\n      typeof components.block === 'function' ? components.block : components.block[style]\n    const Block = handler || components.unknownBlockStyle\n\n    if (Block === components.unknownBlockStyle) {\n      handleMissingComponent(unknownBlockStyleWarning(style), {\n        nodeType: 'blockStyle',\n        type: style,\n      })\n    }\n\n    return <Block key={key} {...props} value={props.node} renderNode={renderNode} />\n  }\n\n  function renderText(node: ToolkitTextNode, key: string) {\n    if (node.text === '\\n') {\n      const HardBreak = components.hardBreak\n      return HardBreak ? <HardBreak key={key} /> : '\\n'\n    }\n\n    return node.text\n  }\n\n  function renderUnknownType(node: TypedObject, index: number, key: string, isInline: boolean) {\n    const nodeOptions = {\n      value: node,\n      isInline,\n      index,\n      renderNode,\n    }\n\n    handleMissingComponent(unknownTypeWarning(node._type), {nodeType: 'block', type: node._type})\n\n    const UnknownType = components.unknownType\n    return <UnknownType key={key} {...nodeOptions} />\n  }\n\n  function renderCustomBlock(node: TypedObject, index: number, key: string, isInline: boolean) {\n    const nodeOptions = {\n      value: node,\n      isInline,\n      index,\n      renderNode,\n    }\n\n    const Node = components.types[node._type]\n    return Node ? <Node key={key} {...nodeOptions} /> : null\n  }\n  /* eslint-enable react/jsx-no-bind */\n\n  return renderNode\n}\n\nfunction serializeBlock(options: Serializable<PortableTextBlock>): SerializedBlock {\n  const {node, index, isInline, renderNode} = options\n  const tree = buildMarksTree(node)\n  const children = tree.map((child, i) =>\n    renderNode({node: child, isInline: true, index: i, renderNode}),\n  )\n\n  return {\n    _key: node._key || `block-${index}`,\n    children,\n    index,\n    isInline,\n    node,\n  }\n}\n\nfunction noop() {\n  // Intentional noop\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAgBO,SAAS,mBACd,MAC0B;AAC1B,SACE,KAAK,UAAU,UACf,UAAU,QACV,OAAO,KAAK,QAAS,aACpB,OAAO,KAAK,QAAU,OACpB,MAAM,QAAQ,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,CAAC,SAAS,OAAO,QAAS,QAAQ;AAEvF;AAQO,SAAS,oBACd,MAC2B;AAC3B;;;IAGE,OAAO,KAAK,SAAU;IAEtB,KAAK,MAAM,CAAC,MAAM;KAEjB,EAAE,cAAc,SACf,CAAC,KAAK,YACL,MAAM,QAAQ,KAAK,QAAQ;IAE1B,KAAK,SAAS,MAAM,CAAC,QAAQ,OAAO,IAAI,QAAS,QAAQ;IAE7D,cAAc,QACd,MAAM,QAAQ,KAAK,QAAQ;IAE3B,KAAK,SAAS,MAAM,CAAC,UAAU,OAAO,SAAU,YAAY,WAAW,KAAK;;AAEhF;AAQO,SAAS,4BACd,OACoC;AACpC,SACE,oBAAoB,KAAK,KACzB,cAAc,SACd,OAAO,MAAM,YAAa,aACzB,OAAO,MAAM,QAAU,OAAe,OAAO,MAAM,SAAU;AAElE;AASO,SAAS,0BACd,OACkC;AAClC,SAAO,MAAM,UAAU;AACzB;AASO,SAAS,0BACd,MACuC;AACvC,SAAO,KAAK,UAAU;AACxB;AASO,SAAS,8BACd,MACyB;AACzB,SAAO,KAAK,UAAU;AACxB;AC3GA,IAAM,kBAAkB,CAAC,UAAU,MAAM,QAAQ,aAAa,gBAAgB;AAuCvE,SAAS,sBACd,MACA,OACA,eACU;AACV,MAAI,CAAC,mBAAmB,IAAI,KAAK,CAAC,KAAK;AACrC,WAAO,CAAA;AAGT,MAAI,CAAC,KAAK,MAAM;AACd,WAAO,CAAA;AAIT,QAAM,QAAQ,KAAK,MAAM,MAAA,GACnB,aAAqC,CAAA;AAC3C,SAAA,MAAM,QAAQ,CAAC,SAAS;AACtB,eAAW,IAAI,IAAI;AAEnB,aAAS,eAAe,QAAQ,GAAG,eAAe,cAAc,QAAQ,gBAAgB;AACtF,YAAM,UAAU,cAAc,YAAY;AAE1C,UACE,WACA,mBAAmB,OAAO,KAC1B,MAAM,QAAQ,QAAQ,KAAK,KAC3B,QAAQ,MAAM,QAAQ,IAAI,MAAM;AAEhC,mBAAW,IAAI;;AAEf;IAEJ;EACF,CAAC,GAEM,MAAM,KAAK,CAAC,OAAO,UAAU,UAAU,YAAY,OAAO,KAAK,CAAC;AACzE;AAEA,SAAS,UACP,YACA,OACA,OACQ;AACR,QAAM,cAAc,WAAW,KAAK,GAC9B,cAAc,WAAW,KAAK;AAEpC,MAAI,gBAAgB;AAClB,WAAO,cAAc;AAGvB,QAAM,YAAY,gBAAgB,QAAQ,KAAK,GACzC,YAAY,gBAAgB,QAAQ,KAAK;AAG/C,SAAI,cAAc,YACT,YAAY,YAId,MAAM,cAAc,KAAK;AAClC;AC9DO,SAAS,eACd,OAC+E;AA3CjF,MAAA;AA4CE,QAAM,EAAC,SAAA,IAAY,OACb,WAAW,MAAM,YAAY,CAAA;AACnC,MAAI,CAAC,YAAY,CAAC,SAAS;AACzB,WAAO,CAAA;AAGT,QAAM,cAAc,SAAS,IAAI,qBAAqB,GAEhD,WAA6C;IACjD,OAAO;IACP,UAAU,CAAA;IACV,UAAU;EAAA;AAGZ,MAAI,YAAgD,CAAC,QAAQ;AAE7D,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,UAAM,OAAO,SAAS,CAAC;AACvB,QAAI,CAAC;AACH;AAGF,UAAM,cAAc,YAAY,CAAC,KAAK,CAAA;AACtC,QAAI,MAAM;AAGV,QAAI,UAAU,SAAS;AACrB,WAAK,KAAK,MAAM,UAAU,QAAQ,OAAO;AACvC,cAAM,SAAO,KAAA,UAAU,GAAG,MAAb,OAAA,SAAA,GAAgB,YAAW,IAClC,QAAQ,YAAY,QAAQ,IAAI;AAEtC,YAAI,UAAU;AACZ;AAGF,oBAAY,OAAO,OAAO,CAAC;MAC7B;AAIF,gBAAY,UAAU,MAAM,GAAG,GAAG;AAGlC,QAAI,cAAc,UAAU,UAAU,SAAS,CAAC;AAChD,QAAK,aAIL;AAAA,iBAAW,WAAW,aAAa;AACjC,cAAM,UAAU,YAAA,OAAA,SAAA,SAAU,KAAK,CAAC,QAAQ,IAAI,SAAS,OAAA,GAC/C,WAAW,UAAU,QAAQ,QAAQ,SACrC,OAAyC;UAC7C,OAAO;UACP,MAAM,KAAK;UACX,UAAU,CAAA;UACV;UACA;UACA;QAAA;AAGF,oBAAY,SAAS,KAAK,IAAI,GAC9B,UAAU,KAAK,IAAI,GACnB,cAAc;MAChB;AAKA,UAAI,mBAAmB,IAAI,GAAG;AAC5B,cAAM,QAAQ,KAAK,KAAK,MAAM;CAAI;AAClC,iBAAS,OAAO,MAAM,QAAQ,SAAS;AACrC,gBAAM,OAAO,MAAM,GAAG;CAAI;AAG5B,oBAAY,WAAW,YAAY,SAAS;UAC1C,MAAM,IAAI,CAAC,UAAU,EAAC,OAAO,SAAS,KAAA,EAAM;QAAA;MAEhD;AAEE,oBAAY,WAAW,YAAY,SAAS,OAAO,IAAI;IAAA;EAE3D;AAEA,SAAO,SAAS;AAClB;AC1EO,SAAS,UACd,QACA,MACiC;AACjC,QAAM,OAAwC,CAAA;AAC9C,MAAI;AAEJ,WAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,UAAM,QAAQ,OAAO,CAAC;AACtB,QAAK,OAIL;AAAA,UAAI,CAAC,4BAA4B,KAAK,GAAG;AACvC,aAAK,KAAK,KAAK,GACf,cAAc;AACd;MACF;AAGA,UAAI,CAAC,aAAa;AAChB,sBAAc,cAAc,OAAO,GAAG,IAAI,GAC1C,KAAK,KAAK,WAAW;AACrB;MACF;AAGA,UAAI,iBAAiB,OAAO,WAAW,GAAG;AACxC,oBAAY,SAAS,KAAK,KAAK;AAC/B;MACF;AAGA,WAAK,MAAM,SAAS,KAAK,YAAY,OAAO;AAC1C,cAAM,UAAU,cAAc,OAAO,GAAG,IAAI;AAE5C,YAAI,SAAS,QAAQ;AAQnB,gBAAM,eAAe,YAAY,SAC/B,YAAY,SAAS,SAAS,CAChC,GAEM,eAA4C;YAChD,GAAG;YACH,UAAU,CAAC,GAAG,aAAa,UAAU,OAAO;UAAA;AAI9C,sBAAY,SAAS,YAAY,SAAS,SAAS,CAAC,IAAI;QAC1D;AACI,sBAA8C,SAAS;YACvD;UAAA;AAKJ,sBAAc;AACd;MACF;AAGA,WAAK,MAAM,SAAS,KAAK,YAAY,OAAO;AAE1C,cAAM,iBAAiB,KAAK,KAAK,SAAS,CAAC,GACrC,QAAQ,kBAAkB,iBAAiB,gBAAgB,KAAK;AACtE,YAAI,OAAO;AACT,wBAAc,OACd,YAAY,SAAS,KAAK,KAAK;AAC/B;QACF;AAGA,sBAAc,cAAc,OAAO,GAAG,IAAI,GAC1C,KAAK,KAAK,WAAW;AACrB;MACF;AAGA,UAAI,MAAM,aAAa,YAAY,UAAU;AAC3C,cAAM,iBAAiB,KAAK,KAAK,SAAS,CAAC,GACrC,QAAQ,kBAAkB,iBAAiB,gBAAgB,EAAC,OAAO,MAAM,SAAS,EAAA,CAAE;AAC1F,YAAI,SAAS,MAAM,aAAa,MAAM,UAAU;AAC9C,wBAAc,OACd,YAAY,SAAS,KAAK,KAAK;AAC/B;QACF,OAAO;AACL,wBAAc,cAAc,OAAO,GAAG,IAAI,GAC1C,KAAK,KAAK,WAAW;AACrB;QACF;MACF;AAGA,cAAQ,KAAK,uCAAuC,KAAK,GACzD,KAAK,KAAK,KAAK;IAAA;EACjB;AAEA,SAAO;AACT;AAEA,SAAS,iBAAiB,OAA0B,MAA+B;AACjF,UAAQ,MAAM,SAAS,OAAO,KAAK,SAAS,MAAM,aAAa,KAAK;AACtE;AAEA,SAAS,cACP,OACA,OACA,MACyB;AACzB,SAAO;IACL,OAAO;IACP,MAAM,GAAG,MAAM,QAAQ,GAAG,KAAK,EAAE;IACjC;IACA,OAAO,MAAM,SAAS;IACtB,UAAU,MAAM;IAChB,UAAU,CAAC,KAAK;EAAA;AAEpB;AAEA,SAAS,iBACP,UACA,UACqC;AACrC,QAAM,QAAQ,SAAS,SAAS,GAC1B,QAAQ,SAAS,YAAY,UAC7B,eAAe,OAAO,SAAS,YAAa;AAClD,MACE,0BAA0B,QAAQ,MACjC,SAAS,SAAS,OAAO,SAC1B,iBACC,SAAS,YAAY,cAAc;AAEpC,WAAO;AAGT,MAAI,EAAE,cAAc;AAClB;AAGF,QAAM,OAAO,SAAS,SAAS,SAAS,SAAS,SAAS,CAAC;AAC3D,SAAO,QAAQ,CAAC,mBAAmB,IAAI,IAAI,iBAAiB,MAAM,QAAQ,IAAI;AAChF;AC5LO,SAAS,gBAAgB,MAA6C;AAC3E,MAAI,OAAO;AACX,SAAA,KAAK,SAAS,QAAQ,CAAC,YAAY;AAC7B,kCAA8B,OAAO,IACvC,QAAQ,QAAQ,OACP,0BAA0B,OAAO,MAC1C,QAAQ,gBAAgB,OAAO;EAEnC,CAAC,GACM;AACT;ACnBA,IAAM,eAAe;AAArB,IACM,gBAAgB;AAaf,SAAS,YACd,OACQ;AACR,QAAM,SAAS,MAAM,QAAQ,KAAK,IAAI,QAAQ,CAAC,KAAK;AACpD,MAAI,OAAO;AAEX,SAAA,OAAO,QAAQ,CAAC,SAAS,UAAU;AACjC,QAAI,CAAC,oBAAoB,OAAO;AAC9B;AAGF,QAAI,MAAM;AACV,YAAQ,SAAS,QAAQ,CAAC,SAAS;AAC7B,yBAAmB,IAAI,KAIzB,QAAQ,OAAO,QAAQ,CAAC,cAAc,KAAK,IAAI,KAAK,CAAC,aAAa,KAAK,KAAK,IAAI,IAAI,MAAM,IAC1F,QAAQ,KAAK,MACb,MAAM,SAEN,MAAM;IAEV,CAAC,GAEG,UAAU,OAAO,SAAS,MAC5B,QAAQ;;;EAEZ,CAAC,GAEM;AACT;ACvCO,IAAM,sBAAsB;;;;ACR5B,IAAM,eAAuE;EAClF,QAAQ,CAAC,EAAC,SAAA,UAAc,wBAAC,MAAA,EAAI,SAAA,CAAS;EACtC,QAAQ,CAAC,EAAC,SAAA,UAAc,wBAAC,MAAA,EAAI,SAAA,CAAS;AACxC;AAHO,IAKM,kBAAiD,CAAC,EAAC,SAAA,UAAc,wBAAC,MAAA,EAAI,SAAA,CAAS;AALrF,ICOD,OAA+C,CAAC,EAAC,UAAU,MAAA,UAC/D,wBAAC,KAAA,EAAE,MAAM,SAAA,OAAA,SAAA,MAAO,MAAO,SAAA,CAAS;ADR3B,ICWD,iBAAiB,EAAC,gBAAgB,YAAA;ADXjC,ICaM,eAAsE;EACjF,IAAM,CAAC,EAAC,SAAA,UAAc,wBAAC,MAAA,EAAI,SAAA,CAAS;EACpC,QAAU,CAAC,EAAC,SAAA,UAAc,wBAAC,UAAA,EAAQ,SAAA,CAAS;EAC5C,MAAQ,CAAC,EAAC,SAAA,UAAc,wBAAC,QAAA,EAAM,SAAA,CAAS;EACxC,WAAa,CAAC,EAAC,SAAA,UAAc,wBAAC,QAAA,EAAK,OAAO,gBAAiB,SAAA,CAAS;EACpE,kBAAkB,CAAC,EAAC,SAAA,UAAc,wBAAC,OAAA,EAAK,SAAA,CAAS;EACjD;AACF;ADpBO,IEFD,cAAc,CAAC,MAAc,SACjC,iCAAiC,IAAI,oDAAoD,IAAI;AFCxF,IECM,qBAAqB,CAAC,aACjC,YAAY,eAAe,QAAQ,KAAK,OAAO;AFF1C,IEIM,qBAAqB,CAAC,aACjC,YAAY,cAAc,QAAQ,KAAK,OAAO;AFLzC,IEOM,2BAA2B,CAAC,eACvC,YAAY,gBAAgB,UAAU,KAAK,OAAO;AFR7C,IEUM,0BAA0B,CAAC,cACtC,YAAY,eAAe,SAAS,KAAK,MAAM;AFX1C,IEaM,8BAA8B,CAAC,cAC1C,YAAY,oBAAoB,SAAS,KAAK,UAAU;AAEnD,SAAS,aAAa,SAAuB;AAClD,UAAQ,KAAK,OAAO;AACtB;ACjBA,IAAM,SAAS,EAAC,SAAS,OAAA;AAAzB,IAEa,qBAAiE,CAAC;EAC7E;EACA;AACF,MAAM;AACJ,QAAM,UAAU,mBAAmB,MAAM,KAAK;AAC9C,SAAO,eAAW,wBAAC,QAAA,EAAK,OAAO,QAAS,UAAA,QAAA,CAAQ,QAAU,wBAAC,OAAA,EAAI,OAAO,QAAS,UAAA,QAAA,CAAQ;AACzF;AARA,IAUa,qBAAiE,CAAC;EAC7E;EACA;AACF,UACS,wBAAC,QAAA,EAAK,WAAW,sBAAsB,QAAQ,IAAK,SAAA,CAAS;AAdtE,IAiBa,2BAA6E,CAAC;EACzF;AACF,UACS,wBAAC,KAAA,EAAG,SAAA,CAAS;AApBtB,IAuBa,qBAAiE,CAAC,EAAC,SAAA,UACvE,wBAAC,MAAA,EAAI,SAAA,CAAS;AAxBvB,IA2Ba,yBAAyE,CAAC;EACrF;AACF,UACS,wBAAC,MAAA,EAAI,SAAA,CAAS;AA9BvB,ICWa,mBAAmB,UAAmB,wBAAC,MAAA,CAAA,CAAG;ADXvD,ICaa,qBAGT;EACF,QAAQ,CAAC,EAAC,SAAA,UAAc,wBAAC,KAAA,EAAG,SAAA,CAAS;EACrC,YAAY,CAAC,EAAC,SAAA,UAAc,wBAAC,cAAA,EAAY,SAAA,CAAS;EAClD,IAAI,CAAC,EAAC,SAAA,UAAc,wBAAC,MAAA,EAAI,SAAA,CAAS;EAClC,IAAI,CAAC,EAAC,SAAA,UAAc,wBAAC,MAAA,EAAI,SAAA,CAAS;EAClC,IAAI,CAAC,EAAC,SAAA,UAAc,wBAAC,MAAA,EAAI,SAAA,CAAS;EAClC,IAAI,CAAC,EAAC,SAAA,UAAc,wBAAC,MAAA,EAAI,SAAA,CAAS;EAClC,IAAI,CAAC,EAAC,SAAA,UAAc,wBAAC,MAAA,EAAI,SAAA,CAAS;EAClC,IAAI,CAAC,EAAC,SAAA,UAAc,wBAAC,MAAA,EAAI,SAAA,CAAS;AACpC;ADzBA,IC2Ba,oBAAiD;EAC5D,OAAO,CAAA;EAEP,OAAO;EACP,OAAO;EACP,MAAM;EACN,UAAU;EACV,WAAW;EAEX,aAAa;EACb,aAAa;EACb,aAAa;EACb,iBAAiB;EACjB,mBAAmB;AACrB;AC1CO,SAAS,gBACd,QACA,WAC6B;AAE7B,QAAM,EAAC,OAAO,MAAM,UAAU,OAAO,OAAO,GAAG,KAAA,IAAQ;AAEvD,SAAO;IACL,GAAG;IACH,OAAO,YAAY,QAAQ,WAAW,OAAO;IAC7C,MAAM,YAAY,QAAQ,WAAW,MAAM;IAC3C,UAAU,YAAY,QAAQ,WAAW,UAAU;IACnD,OAAO,YAAY,QAAQ,WAAW,OAAO;IAC7C,OAAO,YAAY,QAAQ,WAAW,OAAO;IAC7C,GAAG;EAAA;AAEP;AAEA,SAAS,YACP,QACA,WACA,KACyC;AACzC,QAAM,WAAW,UAAU,GAAG,GACxB,YAAY,OAAO,GAAG;AAM5B,SAJI,OAAO,YAAa,cAIpB,YAAY,OAAO,aAAc,aAC5B,WAGL,WACK,EAAC,GAAG,WAAW,GAAG,SAAA,IAGpB;AACT;ACAO,SAAS,aAAwD;EACtE,OAAO;EACP,YAAY;EACZ;EACA,oBAAoB,0BAA0B;AAChD,GAAsC;AACpC,QAAM,yBAAyB,2BAA2B,MACpD,SAAS,MAAM,QAAQ,KAAK,IAAI,QAAQ,CAAC,KAAK,GAC9C,SAAS,UAAU,QAAQ,mBAAmB,mBAAmB,GAEjE,iBAAa,sBAAQ,MAClB,qBACH,gBAAgB,mBAAmB,kBAAkB,IACrD,mBACH,CAAC,kBAAkB,CAAC,GAEjB,iBAAa;IACjB,MAAM,gBAAgB,YAAY,sBAAsB;IACxD,CAAC,YAAY,sBAAsB;EAAA,GAE/B,WAAW,OAAO;IAAI,CAAC,MAAM,UACjC,WAAW,EAAC,MAAY,OAAO,UAAU,OAAO,WAAA,CAAW;EAAA;AAG7D,aAAA,wBAAA,6BAAA,EAAU,UAAA,SAAA,CAAS;AACrB;AAEA,IAAM,kBAAkB,CACtB,YACA,2BACiB;AACjB,WAAS,WAAkC,SAAqC;AAC9E,UAAM,EAAC,MAAM,OAAO,SAAA,IAAY,SAC1B,MAAM,KAAK,QAAQ,QAAQ,KAAK;AAEtC,WAAI,0BAA0B,IAAI,IACzB,WAAW,MAAM,OAAO,GAAG,IAGhC,4BAA4B,IAAI,IAC3B,eAAe,MAAM,OAAO,GAAG,IAGpC,0BAA0B,IAAI,IACzB,WAAW,MAAM,OAAO,GAAG,IAGhC,0BAA0B,IAAI,IACzB,kBAAkB,MAAM,OAAO,KAAK,QAAQ,IAGjD,oBAAoB,IAAI,IACnB,YAAY,MAAM,OAAO,KAAK,QAAQ,IAG3C,8BAA8B,IAAI,IAC7B,WAAW,MAAM,GAAG,IAGtB,kBAAkB,MAAM,OAAO,KAAK,QAAQ;EACrD;AAEA,WAAS,0BAA0B,MAA4B;AAC7D,WAAO,KAAK,SAAS,WAAW;EAClC;AAGA,WAAS,eACP,MACA,OACA,KACA;AACA,UAAM,OAAO,eAAe,EAAC,MAAM,OAAO,UAAU,OAAO,WAAA,CAAW,GAChE,WAAW,WAAW,UAEtB,MADU,OAAO,YAAa,aAAa,WAAW,SAAS,KAAK,QAAQ,MAC5D,WAAW;AAEjC,QAAI,OAAO,WAAW,iBAAiB;AACrC,YAAM,QAAQ,KAAK,YAAY;AAC/B,6BAAuB,4BAA4B,KAAK,GAAG;QACzD,MAAM;QACN,UAAU;MAAA,CACX;IACH;AAEA,QAAI,WAAW,KAAK;AACpB,QAAI,KAAK,SAAS,KAAK,UAAU,UAAU;AAGzC,YAAM,EAAC,UAAU,GAAG,UAAA,IAAa;AACjC,iBAAW,WAAW,EAAC,MAAM,WAAW,OAAO,UAAU,MAAiB,CAAC;IAC7E;AAEA,eACE,wBAAC,IAAA,EAAa,OAAO,MAAM,OAAc,UAAU,OAAO,YACvD,SAAA,GADM,GAET;EAEJ;AAEA,WAAS,WAAW,MAA6B,OAAe,KAAa;AAC3E,UAAM,WAAW,KAAK,SAAS;MAAI,CAAC,OAAO,eACzC,WAAW;QACT,MAAM,MAAM,OAAO,QAAQ,EAAC,GAAG,OAAO,MAAM,MAAM,KAAK,IAAI,UAAU,GAAA;QACrE,OAAO;QACP,UAAU;MAEZ,CAAC;IAAA,GAGG,YAAY,WAAW,MAEvB,QADU,OAAO,aAAc,aAAa,YAAY,UAAU,KAAK,QAAQ,MAC7D,WAAW;AAEnC,QAAI,SAAS,WAAW,aAAa;AACnC,YAAM,QAAQ,KAAK,YAAY;AAC/B,6BAAuB,wBAAwB,KAAK,GAAG,EAAC,UAAU,aAAa,MAAM,MAAA,CAAM;IAC7F;AAEA,eACE,wBAAC,MAAA,EAAe,OAAO,MAAM,OAAc,UAAU,OAAO,YACzD,SAAA,GADQ,GAEX;EAEJ;AAEA,WAAS,WAAW,MAAqC,QAAgB,KAAa;AACpF,UAAM,EAAC,SAAS,UAAU,QAAA,IAAW,MAC/B,OAAO,WAAW,MAAM,QAAQ,KAAK,WAAW,aAChD,WAAW,KAAK,SAAS;MAAI,CAAC,OAAO,eACzC,WAAW,EAAC,MAAM,OAAO,OAAO,YAAY,UAAU,KAAgB,CAAC;IAAA;AAGzE,WAAI,SAAS,WAAW,eACtB,uBAAuB,mBAAmB,QAAQ,GAAG,EAAC,UAAU,QAAQ,MAAM,SAAA,CAAS,OAIvF;MAAC;MAAA;QAEC,MAAM,gBAAgB,IAAI;QAC1B,OAAO;QACP;QACA;QACA;QAEC;MAAA;MAPI;IAAA;EAUX;AAEA,WAAS,YAAY,MAAyB,OAAe,KAAa,UAAmB;AAE3F,UAAM,EAAC,MAAM,GAAG,MAAA,IAAS,eAAe,EAAC,MAAM,OAAO,UAAU,WAAA,CAAW,GACrE,QAAQ,MAAM,KAAK,SAAS,UAG5B,SADJ,OAAO,WAAW,SAAU,aAAa,WAAW,QAAQ,WAAW,MAAM,KAAK,MAC3D,WAAW;AAEpC,WAAI,UAAU,WAAW,qBACvB,uBAAuB,yBAAyB,KAAK,GAAG;MACtD,UAAU;MACV,MAAM;IAAA,CACP,OAGI,wBAAC,OAAA,EAAiB,GAAG,OAAO,OAAO,MAAM,MAAM,WAAA,GAAnC,GAA2D;EAChF;AAEA,WAAS,WAAW,MAAuB,KAAa;AACtD,QAAI,KAAK,SAAS;GAAM;AACtB,YAAM,YAAY,WAAW;AAC7B,aAAO,gBAAY,wBAAC,WAAA,CAAA,GAAe,GAAK,IAAK;;IAC/C;AAEA,WAAO,KAAK;EACd;AAEA,WAAS,kBAAkB,MAAmB,OAAe,KAAa,UAAmB;AAC3F,UAAM,cAAc;MAClB,OAAO;MACP;MACA;MACA;IAAA;AAGF,2BAAuB,mBAAmB,KAAK,KAAK,GAAG,EAAC,UAAU,SAAS,MAAM,KAAK,MAAA,CAAM;AAE5F,UAAM,cAAc,WAAW;AAC/B,eAAO,wBAAC,aAAA,EAAuB,GAAG,YAAA,GAAT,GAAsB;EACjD;AAEA,WAAS,kBAAkB,MAAmB,OAAe,KAAa,UAAmB;AAC3F,UAAM,cAAc;MAClB,OAAO;MACP;MACA;MACA;IAAA,GAGI,OAAO,WAAW,MAAM,KAAK,KAAK;AACxC,WAAO,WAAO,wBAAC,MAAA,EAAgB,GAAG,YAAA,GAAT,GAAsB,IAAK;EACtD;AAGA,SAAO;AACT;AAEA,SAAS,eAAe,SAA2D;AACjF,QAAM,EAAC,MAAM,OAAO,UAAU,WAAA,IAAc,SAEtC,WADO,eAAe,IAAI,EACV;IAAI,CAAC,OAAO,MAChC,WAAW,EAAC,MAAM,OAAO,UAAU,MAAM,OAAO,GAAG,WAAA,CAAW;EAAA;AAGhE,SAAO;IACL,MAAM,KAAK,QAAQ,SAAS,KAAK;IACjC;IACA;IACA;IACA;EAAA;AAEJ;AAEA,SAAS,OAAO;AAEhB;",
  "names": []
}
